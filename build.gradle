buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
        }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring-plugin'
        }
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'java-library'
    id 'java'
}

group = 'cc.xfl12345.mybigdata'
version = '0.0.1'
sourceCompatibility = '17'

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    compileJava.options.compilerArgs  << '-Xlint:unchecked'
    compileJava.options.encoding = 'UTF-8'
    withSourcesJar()
    // withJavadocJar()
}

javadoc {
    // System.setProperty("JAVA_TOOL_OPTIONS", "-Dfile.encoding=UTF-8")
    options.encoding = 'UTF-8'
    // options.encoding = 'GBK'
    // options.charSet = 'UTF-8'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        url 'https://maven.aliyun.com/repository/public'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring-plugin'
    }
}


import java.nio.charset.StandardCharsets

dependencies {
    File localDevModeConfFile = new File("localDevMode");
    boolean isLocalDevMode = false;
    if (localDevModeConfFile.exists()) {
        FileReader fileReader = new FileReader(localDevModeConfFile, StandardCharsets.UTF_8);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            String localDevMode = bufferedReader.readLine();
            isLocalDevMode = "true".equals(localDevMode);
        } catch (Exception ignored) {
        } finally {
            bufferedReader.close();
            fileReader.close();
        }
    }

    def applyPlatform2All = (myDependencyParent) -> {
        api platform(myDependencyParent)
        // providedRuntime platform(myDependencyParent)
        annotationProcessor platform(myDependencyParent)
        runtimeOnly platform(myDependencyParent)
        runtimeClasspath platform(myDependencyParent)
        testAnnotationProcessor platform(myDependencyParent)
        testImplementation platform(myDependencyParent)
        testRuntimeOnly platform(myDependencyParent)
        testRuntimeClasspath platform(myDependencyParent)
    }

    String depsParentVersion = '0.0.1'
    if (isLocalDevMode) {
        applyPlatform2All(group: 'cc.xfl12345.mybigdata', name: 'server-deps-parent', version: depsParentVersion)
    } else {
        depsParentVersion = 'ad2e00850d'
        applyPlatform2All(group: 'com.github.xfl12345', name: 'java-mybigdata-server-deps-parent', version: depsParentVersion)
    }

    // 注解神器 getter setter toString builder
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    api group: 'org.projectlombok', name: 'lombok'
    annotationProcessor group: 'org.projectlombok', name: 'lombok'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
    testImplementation group: 'org.projectlombok', name: 'lombok'

    // javax
    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
    api group: 'javax.persistence', name: 'javax.persistence-api'

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    api group: 'javax.annotation', name: 'javax.annotation-api'

    // Spring
    // https://mvnrepository.com/artifact/org.springframework/spring-beans
    api group: 'org.springframework', name: 'spring-beans'

    // https://mvnrepository.com/artifact/org.springframework/spring-web
    api group: 'org.springframework', name: 'spring-web'

    // Apache commons
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    api group: 'commons-codec', name: 'commons-codec'

    // JSON support
    // https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2
    api group: 'com.alibaba.fastjson2', name: 'fastjson2'

    // Slf4j API
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    api group: 'org.slf4j', name: 'slf4j-api'

    // UUID generator support
    // https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator
    api group: 'com.fasterxml.uuid', name: 'java-uuid-generator'

    // 字符串风格转换工具
    // https://mvnrepository.com/artifact/com.shekhargulati/strman
    api group: 'com.shekhargulati', name: 'strman'

    // Java字节码技术工具 byte buddy
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
    api group: 'net.bytebuddy', name: 'byte-buddy'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}
